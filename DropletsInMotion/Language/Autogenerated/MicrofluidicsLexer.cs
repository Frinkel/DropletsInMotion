//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//     ANTLR Version: 4.13.2
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

// Generated from C:/Github/DropletsInMotion/DropletsInMotion/language/Microfluidics.g4 by ANTLR 4.13.2

// Unreachable code detected
#pragma warning disable 0162
// The variable '...' is assigned but its value is never used
#pragma warning disable 0219
// Missing XML comment for publicly visible type or member '...'
#pragma warning disable 1591
// Ambiguous reference in cref attribute
#pragma warning disable 419

using System;
using System.IO;
using System.Text;
using Antlr4.Runtime;
using Antlr4.Runtime.Atn;
using Antlr4.Runtime.Misc;
using DFA = Antlr4.Runtime.Dfa.DFA;

[System.CodeDom.Compiler.GeneratedCode("ANTLR", "4.13.2")]
[System.CLSCompliant(false)]
public partial class MicrofluidicsLexer : Lexer {
	protected static DFA[] decisionToDFA;
	protected static PredictionContextCache sharedContextCache = new PredictionContextCache();
	public const int
		T__0=1, T__1=2, T__2=3, T__3=4, T__4=5, T__5=6, IDENTIFIER=7, INT=8, FLOAT=9, 
		WS=10;
	public static string[] channelNames = {
		"DEFAULT_TOKEN_CHANNEL", "HIDDEN"
	};

	public static string[] modeNames = {
		"DEFAULT_MODE"
	};

	public static readonly string[] ruleNames = {
		"T__0", "T__1", "T__2", "T__3", "T__4", "T__5", "IDENTIFIER", "INT", "FLOAT", 
		"WS"
	};


	public MicrofluidicsLexer(ICharStream input)
	: this(input, Console.Out, Console.Error) { }

	public MicrofluidicsLexer(ICharStream input, TextWriter output, TextWriter errorOutput)
	: base(input, output, errorOutput)
	{
		Interpreter = new LexerATNSimulator(this, _ATN, decisionToDFA, sharedContextCache);
	}

	private static readonly string[] _LiteralNames = {
		null, "';'", "'Droplet'", "'('", "','", "')'", "'Move'"
	};
	private static readonly string[] _SymbolicNames = {
		null, null, null, null, null, null, null, "IDENTIFIER", "INT", "FLOAT", 
		"WS"
	};
	public static readonly IVocabulary DefaultVocabulary = new Vocabulary(_LiteralNames, _SymbolicNames);

	[NotNull]
	public override IVocabulary Vocabulary
	{
		get
		{
			return DefaultVocabulary;
		}
	}

	public override string GrammarFileName { get { return "Microfluidics.g4"; } }

	public override string[] RuleNames { get { return ruleNames; } }

	public override string[] ChannelNames { get { return channelNames; } }

	public override string[] ModeNames { get { return modeNames; } }

	public override int[] SerializedAtn { get { return _serializedATN; } }

	static MicrofluidicsLexer() {
		decisionToDFA = new DFA[_ATN.NumberOfDecisions];
		for (int i = 0; i < _ATN.NumberOfDecisions; i++) {
			decisionToDFA[i] = new DFA(_ATN.GetDecisionState(i), i);
		}
	}
	private static int[] _serializedATN = {
		4,0,10,72,6,-1,2,0,7,0,2,1,7,1,2,2,7,2,2,3,7,3,2,4,7,4,2,5,7,5,2,6,7,6,
		2,7,7,7,2,8,7,8,2,9,7,9,1,0,1,0,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,2,1,
		2,1,3,1,3,1,4,1,4,1,5,1,5,1,5,1,5,1,5,1,6,1,6,5,6,45,8,6,10,6,12,6,48,
		9,6,1,7,4,7,51,8,7,11,7,12,7,52,1,8,4,8,56,8,8,11,8,12,8,57,1,8,1,8,4,
		8,62,8,8,11,8,12,8,63,1,9,4,9,67,8,9,11,9,12,9,68,1,9,1,9,0,0,10,1,1,3,
		2,5,3,7,4,9,5,11,6,13,7,15,8,17,9,19,10,1,0,4,3,0,65,90,95,95,97,122,4,
		0,48,57,65,90,95,95,97,122,1,0,48,57,3,0,9,10,13,13,32,32,76,0,1,1,0,0,
		0,0,3,1,0,0,0,0,5,1,0,0,0,0,7,1,0,0,0,0,9,1,0,0,0,0,11,1,0,0,0,0,13,1,
		0,0,0,0,15,1,0,0,0,0,17,1,0,0,0,0,19,1,0,0,0,1,21,1,0,0,0,3,23,1,0,0,0,
		5,31,1,0,0,0,7,33,1,0,0,0,9,35,1,0,0,0,11,37,1,0,0,0,13,42,1,0,0,0,15,
		50,1,0,0,0,17,55,1,0,0,0,19,66,1,0,0,0,21,22,5,59,0,0,22,2,1,0,0,0,23,
		24,5,68,0,0,24,25,5,114,0,0,25,26,5,111,0,0,26,27,5,112,0,0,27,28,5,108,
		0,0,28,29,5,101,0,0,29,30,5,116,0,0,30,4,1,0,0,0,31,32,5,40,0,0,32,6,1,
		0,0,0,33,34,5,44,0,0,34,8,1,0,0,0,35,36,5,41,0,0,36,10,1,0,0,0,37,38,5,
		77,0,0,38,39,5,111,0,0,39,40,5,118,0,0,40,41,5,101,0,0,41,12,1,0,0,0,42,
		46,7,0,0,0,43,45,7,1,0,0,44,43,1,0,0,0,45,48,1,0,0,0,46,44,1,0,0,0,46,
		47,1,0,0,0,47,14,1,0,0,0,48,46,1,0,0,0,49,51,7,2,0,0,50,49,1,0,0,0,51,
		52,1,0,0,0,52,50,1,0,0,0,52,53,1,0,0,0,53,16,1,0,0,0,54,56,7,2,0,0,55,
		54,1,0,0,0,56,57,1,0,0,0,57,55,1,0,0,0,57,58,1,0,0,0,58,59,1,0,0,0,59,
		61,5,46,0,0,60,62,7,2,0,0,61,60,1,0,0,0,62,63,1,0,0,0,63,61,1,0,0,0,63,
		64,1,0,0,0,64,18,1,0,0,0,65,67,7,3,0,0,66,65,1,0,0,0,67,68,1,0,0,0,68,
		66,1,0,0,0,68,69,1,0,0,0,69,70,1,0,0,0,70,71,6,9,0,0,71,20,1,0,0,0,6,0,
		46,52,57,63,68,1,6,0,0
	};

	public static readonly ATN _ATN =
		new ATNDeserializer().Deserialize(_serializedATN);


}
