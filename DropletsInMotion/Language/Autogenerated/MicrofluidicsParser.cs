//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//     ANTLR Version: 4.13.2
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

// Generated from C:/Github/DropletsInMotion/DropletsInMotion/language/Microfluidics.g4 by ANTLR 4.13.2

// Unreachable code detected
#pragma warning disable 0162
// The variable '...' is assigned but its value is never used
#pragma warning disable 0219
// Missing XML comment for publicly visible type or member '...'
#pragma warning disable 1591
// Ambiguous reference in cref attribute
#pragma warning disable 419

using System;
using System.IO;
using System.Text;
using System.Diagnostics;
using System.Collections.Generic;
using Antlr4.Runtime;
using Antlr4.Runtime.Atn;
using Antlr4.Runtime.Misc;
using Antlr4.Runtime.Tree;
using DFA = Antlr4.Runtime.Dfa.DFA;

[System.CodeDom.Compiler.GeneratedCode("ANTLR", "4.13.2")]
[System.CLSCompliant(false)]
public partial class MicrofluidicsParser : Parser {
	protected static DFA[] decisionToDFA;
	protected static PredictionContextCache sharedContextCache = new PredictionContextCache();
	public const int
		T__0=1, T__1=2, T__2=3, T__3=4, T__4=5, T__5=6, IDENTIFIER=7, INT=8, FLOAT=9, 
		WS=10;
	public const int
		RULE_program = 0, RULE_statement = 1, RULE_dropletDeclaration = 2, RULE_moveDroplet = 3;
	public static readonly string[] ruleNames = {
		"program", "statement", "dropletDeclaration", "moveDroplet"
	};

	private static readonly string[] _LiteralNames = {
		null, "';'", "'Droplet'", "'('", "','", "')'", "'Move'"
	};
	private static readonly string[] _SymbolicNames = {
		null, null, null, null, null, null, null, "IDENTIFIER", "INT", "FLOAT", 
		"WS"
	};
	public static readonly IVocabulary DefaultVocabulary = new Vocabulary(_LiteralNames, _SymbolicNames);

	[NotNull]
	public override IVocabulary Vocabulary
	{
		get
		{
			return DefaultVocabulary;
		}
	}

	public override string GrammarFileName { get { return "Microfluidics.g4"; } }

	public override string[] RuleNames { get { return ruleNames; } }

	public override int[] SerializedAtn { get { return _serializedATN; } }

	static MicrofluidicsParser() {
		decisionToDFA = new DFA[_ATN.NumberOfDecisions];
		for (int i = 0; i < _ATN.NumberOfDecisions; i++) {
			decisionToDFA[i] = new DFA(_ATN.GetDecisionState(i), i);
		}
	}

		public MicrofluidicsParser(ITokenStream input) : this(input, Console.Out, Console.Error) { }

		public MicrofluidicsParser(ITokenStream input, TextWriter output, TextWriter errorOutput)
		: base(input, output, errorOutput)
	{
		Interpreter = new ParserATNSimulator(this, _ATN, decisionToDFA, sharedContextCache);
	}

	public partial class ProgramContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode Eof() { return GetToken(MicrofluidicsParser.Eof, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public StatementContext[] statement() {
			return GetRuleContexts<StatementContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public StatementContext statement(int i) {
			return GetRuleContext<StatementContext>(i);
		}
		public ProgramContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_program; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IMicrofluidicsListener typedListener = listener as IMicrofluidicsListener;
			if (typedListener != null) typedListener.EnterProgram(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IMicrofluidicsListener typedListener = listener as IMicrofluidicsListener;
			if (typedListener != null) typedListener.ExitProgram(this);
		}
	}

	[RuleVersion(0)]
	public ProgramContext program() {
		ProgramContext _localctx = new ProgramContext(Context, State);
		EnterRule(_localctx, 0, RULE_program);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 13;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			while (_la==T__1 || _la==T__5) {
				{
				{
				State = 8;
				statement();
				State = 9;
				Match(T__0);
				}
				}
				State = 15;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
			}
			State = 16;
			Match(Eof);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class StatementContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public DropletDeclarationContext dropletDeclaration() {
			return GetRuleContext<DropletDeclarationContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public MoveDropletContext moveDroplet() {
			return GetRuleContext<MoveDropletContext>(0);
		}
		public StatementContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_statement; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IMicrofluidicsListener typedListener = listener as IMicrofluidicsListener;
			if (typedListener != null) typedListener.EnterStatement(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IMicrofluidicsListener typedListener = listener as IMicrofluidicsListener;
			if (typedListener != null) typedListener.ExitStatement(this);
		}
	}

	[RuleVersion(0)]
	public StatementContext statement() {
		StatementContext _localctx = new StatementContext(Context, State);
		EnterRule(_localctx, 2, RULE_statement);
		try {
			State = 20;
			ErrorHandler.Sync(this);
			switch (TokenStream.LA(1)) {
			case T__1:
				EnterOuterAlt(_localctx, 1);
				{
				State = 18;
				dropletDeclaration();
				}
				break;
			case T__5:
				EnterOuterAlt(_localctx, 2);
				{
				State = 19;
				moveDroplet();
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class DropletDeclarationContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode IDENTIFIER() { return GetToken(MicrofluidicsParser.IDENTIFIER, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode[] INT() { return GetTokens(MicrofluidicsParser.INT); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode INT(int i) {
			return GetToken(MicrofluidicsParser.INT, i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode FLOAT() { return GetToken(MicrofluidicsParser.FLOAT, 0); }
		public DropletDeclarationContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_dropletDeclaration; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IMicrofluidicsListener typedListener = listener as IMicrofluidicsListener;
			if (typedListener != null) typedListener.EnterDropletDeclaration(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IMicrofluidicsListener typedListener = listener as IMicrofluidicsListener;
			if (typedListener != null) typedListener.ExitDropletDeclaration(this);
		}
	}

	[RuleVersion(0)]
	public DropletDeclarationContext dropletDeclaration() {
		DropletDeclarationContext _localctx = new DropletDeclarationContext(Context, State);
		EnterRule(_localctx, 4, RULE_dropletDeclaration);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 22;
			Match(T__1);
			State = 23;
			Match(T__2);
			State = 24;
			Match(IDENTIFIER);
			State = 25;
			Match(T__3);
			State = 26;
			Match(INT);
			State = 27;
			Match(T__3);
			State = 28;
			Match(INT);
			State = 29;
			Match(T__3);
			State = 30;
			Match(FLOAT);
			State = 31;
			Match(T__4);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class MoveDropletContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode IDENTIFIER() { return GetToken(MicrofluidicsParser.IDENTIFIER, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode[] INT() { return GetTokens(MicrofluidicsParser.INT); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode INT(int i) {
			return GetToken(MicrofluidicsParser.INT, i);
		}
		public MoveDropletContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_moveDroplet; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IMicrofluidicsListener typedListener = listener as IMicrofluidicsListener;
			if (typedListener != null) typedListener.EnterMoveDroplet(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IMicrofluidicsListener typedListener = listener as IMicrofluidicsListener;
			if (typedListener != null) typedListener.ExitMoveDroplet(this);
		}
	}

	[RuleVersion(0)]
	public MoveDropletContext moveDroplet() {
		MoveDropletContext _localctx = new MoveDropletContext(Context, State);
		EnterRule(_localctx, 6, RULE_moveDroplet);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 33;
			Match(T__5);
			State = 34;
			Match(T__2);
			State = 35;
			Match(IDENTIFIER);
			State = 36;
			Match(T__3);
			State = 37;
			Match(INT);
			State = 38;
			Match(T__3);
			State = 39;
			Match(INT);
			State = 40;
			Match(T__4);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	private static int[] _serializedATN = {
		4,1,10,43,2,0,7,0,2,1,7,1,2,2,7,2,2,3,7,3,1,0,1,0,1,0,5,0,12,8,0,10,0,
		12,0,15,9,0,1,0,1,0,1,1,1,1,3,1,21,8,1,1,2,1,2,1,2,1,2,1,2,1,2,1,2,1,2,
		1,2,1,2,1,2,1,3,1,3,1,3,1,3,1,3,1,3,1,3,1,3,1,3,1,3,0,0,4,0,2,4,6,0,0,
		40,0,13,1,0,0,0,2,20,1,0,0,0,4,22,1,0,0,0,6,33,1,0,0,0,8,9,3,2,1,0,9,10,
		5,1,0,0,10,12,1,0,0,0,11,8,1,0,0,0,12,15,1,0,0,0,13,11,1,0,0,0,13,14,1,
		0,0,0,14,16,1,0,0,0,15,13,1,0,0,0,16,17,5,0,0,1,17,1,1,0,0,0,18,21,3,4,
		2,0,19,21,3,6,3,0,20,18,1,0,0,0,20,19,1,0,0,0,21,3,1,0,0,0,22,23,5,2,0,
		0,23,24,5,3,0,0,24,25,5,7,0,0,25,26,5,4,0,0,26,27,5,8,0,0,27,28,5,4,0,
		0,28,29,5,8,0,0,29,30,5,4,0,0,30,31,5,9,0,0,31,32,5,5,0,0,32,5,1,0,0,0,
		33,34,5,6,0,0,34,35,5,3,0,0,35,36,5,7,0,0,36,37,5,4,0,0,37,38,5,8,0,0,
		38,39,5,4,0,0,39,40,5,8,0,0,40,41,5,5,0,0,41,7,1,0,0,0,2,13,20
	};

	public static readonly ATN _ATN =
		new ATNDeserializer().Deserialize(_serializedATN);


}
